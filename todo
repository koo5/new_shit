plans
===
splitting the program into the server, the pygame editor frontend window, and a new QT-based sidebar window. After researching several options im leaning
towards using gRPC for this.

(possibly both-ways) integrations with: 
https://www.kickstarter.com/projects/xiki/xikihub-the-social-command-line
https://github.com/MycroftAI
gnome3/unity/whatever menu
only one way:
solr or ES for searching through local documents from within newshit
i would also like to do some front-ending for https://github.com/researchstudio-sat/webofneeds
as well as further develop ./hallucinations/koord.lemon.txt , which could be integrated in webofneeds





misc/not core newshit
----------------
pyin
webofneeds

set up a vps, post a bounty for fixing editable-log reconnecting
use koding?












newshit
----------

* finish the parser

* optimize rendering of scrolled frames: new tag rendering system


* integrate sources of content/functionality/commands: snipplr, mycroft, xiki



* experiment with storing nodes in a triplestore/declaratively

* split off menu frontend with grpc


* continue hacking on the mockup language: add Identifier as a fallback for parsing identifiers not in scope(?)



* functions vs syntax definition
we have unevaluated arguments, so a function body can be thought of as a rule for
evaluating the node. there could be other rules: display, debugging..?..



* new languages:
** narsese
** guisese - for controlling seh's gui
** editorsese - all actions available in the editor, handle everything thru Action objects, add undo/redo


*gui frames:
#todo: function definition / insight frame? preferably able to float in multiple numbers around the code
#status / action log window <- with keypresses too
#toolbar (toolbar.py)
#settings, the doc?




* make a simplified personal-assistant ui
* add support for android apis alla commandr and automateit
* improve lemon language, add a rule system
* profit



    
    
split Ref and TypeRef






streamline things. what are
*elementary nodes - text, number, ..,? how can we formalize their definition in terms of a nodecl(?) and python code?
*nodes that define a language? nodecl, worksas, definition, syntacticcategory, exp.. syntax definition node..
*nodes of some language itself? customnode?





modules: how to declare imports, how to denote in menu items that a function is
from some module..
dbpedia node
todo:pip search hjson
#todo:xiki style terminal, standard terminal. Both favoring UserCommands
#first user command: commit all and push;)


Universes
---------------------
universes
universe cumulativity
universe polymorphism
universe polymorphism without SetOmega
record types and modules
typical ambiguity
universe-level irrelevance


Tau-related
----------------------
HMC's DRTs/Universes thing
translate into natural deduction
translate into triples
fix the RDF reasoner


Named Expressions, Recursion & Inductive types
----------------------
named expressions
recursion
corecursion
productivity
totality
codata
fixed-point combinators
inductive types
inductive families of types
coinductive types?
higher inductive types
identity types / paths
path induction
univalence
function extensionality
algebraic data types
parametric algebraic data types
generalized algebraic data types


Impurity
------------------
monads
side-effects
type providers


Misc
------------------
polarity
subterm irrelevance
record subtyping
intersection types
dependent intersection types
eta-equality
implicit arguments (inferred by system)



Optimization
----------------
*Optimize by erasing unnecessary information
*Optimize in either time / space relative to an instruction set architecture

De Bruijn indexing
Compiled lambda expressions

*Supercompilation as theorem proving?



Beyond
-------------------
HOAS
PHOAS
categories defined with dependent types
identity within categories defined as isomorphism           
functors relating objects at different levels of abstraction 
theoretical: embed the system into the untyped lambda calculus
theoretical: embed the system within a self-interpreter
expand the CoC to a pure type system, taking an SAR triple
  and matching data-types & methods for them



Applications (besides Tau & everything we already know Tau will be used for)
---------------------
*If we make a tech product, then the programmer should find it logical but the
 customer should find it magical.



Human-Computer Interface
-----------------------------
Controlled natural language
  Voice-to-code; code-to-voice
Natural language processing
Personal assistant
Personal semantic wiki
Public semantic wiki (aka Atlas Project?)



Mathematical applications
--------------------------
Automated theorem proving (but I mean more specifically, like for particular applications)
Geometric reasoning
Topological reasoning




Programming applications
---------------------------
Automated language-to-language program/logic translation
Typed machine code

Program verification according to formal specifications (we've already done this! crazy!)
Hardware verification according to formal specifications (ultimately this is just a very
  special & sophisticated case of the same activity as program verification)
Verification of engineering design according to formal specifications relative to a formally
  specified framework of physics (yet another very sophisticated case of the same activity as
    program verification)

Determine time & space complexity of programs
Find minimal program matching specifications



AI & Expert systems
--------------------------
Artificial intelligence
Medical diagnostics
 cf. agfa



Tau-ish applications
-----------------------
* Guess we need to start with the basics here: 
   DHTs, 
   block-chains, 
   side-chains, 
   smart-contracts, 
   cryptocurrencies
   nomics

DAOs
decentralized <insert financial thing>
decentralized <insert governance thing>
decentralized <insert major online application service that is currently centralized>


Real-time decentralized online video gaming?






*Apparently this system in particular is used as the basis
 of many implementations of MLTT-like systems
Zhenhui Luo's extended calculus of constructions



(Real) systems using type theory / lambda calculus
------------------------------------------
Agda2
Alf
Automath
Coq
Haskell
Idris
Matita
Twelf
